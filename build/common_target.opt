#
#    Génération d'une librairie
#
!ifdef LIBRARY_NAME
ALL: $(SPECIFIC_TARGET) $(LIBRARY_NAME)
#
#    Ou d'un executable
!else
ALL: $(exe_device_server)
!endif


!ifdef LIBRARY_NAME

!message "generation librairie"
!undef exe_device_server
$(LIBRARY_NAME):  $(LISTEOBJ) $(TANGOLIB) $(LIB_NAME) 
  $(LINK) -OUT:$(LIBRARY_NAME) $(LINKFLAGS) $(LISTEOBJ) $(LIBUSER)
  @echo Compilation réussie !

!else

$(exe_device_server): $(TANGOLIB) $(LIB_NAME) $(LISTEOBJ)
  $(LINK)  -OUT:$(exe_device_server) $(LINKFLAGS) $(NOGUI_LINKFLAGS) $(SYSLIBS) $(LIB_NAME) $(TANGOLIB) $(LIBUSER) $(LISTEOBJ) /MANIFESTFILE:$(OBJDIR)\ds_$(device_server).embed.manifest /IMPLIB:$(OBJDIR)/ds_$(device_server).lib
 
  @echo Embarquement du manifeste dans $(exe_device_server)...
  @mt.exe -nologo -manifest $(OBJDIR)\ds_$(device_server).embed.manifest -outputresource:$@;1
  @echo Compilation réussie !
  
!endif

#
#  Les dependences minimales  pour tous DeviceServers
#
ClassFactory.OBJ: $(device_server).h $(device_server)Class.h

$(device_server)Class.OBJ : $(device_server)Class.h  $(device_server).h

$(device_server).OBJ: $(device_server).h  $(device_server)Class.h


CLEAN:CLEANEXE
  @echo nettoyage .OBJ ....
  @for %i in ( $(LISTEOBJ) ) do \
	@if exist %i del %i
  @echo nettoyage manifeste ...
  @if exist $(OBJDIR)\ds_$(device_server).embed.manifest del $(OBJDIR)\ds_$(device_server).embed.manifest
  
CLEANEXE:
!ifdef exe_device_server
  @echo nettoyage $(exe_device_server) ...
  @if exist $(exe_device_server) del $(exe_device_server)
!else
  @echo nettoyage $(LIBRARY_NAME) ...
  @if exist "$(LIBRARY_NAME)" del "$(LIBRARY_NAME)"
!endif

PURIFY:
  purify /CacheDir=$(EXEDIR)/purify /ShowInstrumentationProgress=yes  /Run=no /Replace=yes $(exe_device_server)

QUANTIFY:
  quantify /CacheDir=$(EXEDIR)/quantify /ShowInstrumentationProgress=yes  /Run=no /Replace=yes $(exe_device_server)

RELEASE :
	@echo Pas encore implemente

# Pseudotarget par defaut
TOUT: ALL

#   - Gestion d'un répertoire source contenant plusieurs sous répertoire -
#   ces lignes permettent la création dans OBJDIR d'une arborescence similaire à celle
#   du répertoire source. elles sont commentées car pour l'instant on utilise les
#   différentes variables du type CPPDIRUSER1,...,CPPDIRUSER10
#   
#	@if exist $(TMP_FILE_CREATEDIR)_1 del $(TMP_FILE_CREATEDIR)_1
#	@if exist $(TMP_FILE_CREATEDIR)_2 del $(TMP_FILE_CREATEDIR)_2
#	@for %%i in ( $(LISTEOBJ) ) do @$(SOLEIL_ROOT)\tools\unxutils\dirname.exe %%i% >> $(TMP_FILE_CREATEDIR)_1
#	@$(SOLEIL_ROOT)\tools\unxutils\sed.exe "s/\//\\/g" $(TMP_FILE_CREATEDIR)_1 >> $(TMP_FILE_CREATEDIR)_2
#	-@for /f "eol=; tokens=1 delims=," %%N in ( $(TMP_FILE_CREATEDIR)_2 ) do @if not exist %%N mkdir %%N		
#	@if exist $(TMP_FILE_CREATEDIR)_1 del $(TMP_FILE_CREATEDIR)_1
#	@if exist $(TMP_FILE_CREATEDIR)_2 del $(TMP_FILE_CREATEDIR)_2
